(define lambda
  (macro (formals . body) env
    (let ((thunk-code (cons macro (cons formals (cons _ body))))
          (thunk (eval thunk-code env)))
      (wrap thunk))))

(define defn
  (macro (name formals . body) env
    (let ((definition (cons lambda (cons formals body)))
          (value (eval definition env)))

      (eval (list define name value) env))))


;;; from the LISP 1.5 Programmer's Manual
(defn equal (x y)
  (cond
    ((atom x) (if (atom y) (eq x y) nil))
    ((_equal (car x) (car y)) (_equal (cdr x) (cdr y)))
    (t nil)))

(defn subst (x y z)
  (cond ((eq y z) x)
        ((atom z) z)
        (t (cons (subst x y (car z))
                 (subst x y (cdr z))))))
(defn pairlis (x y a)
  (cond ((null x) a)
        (t (cons (cons (car x) (car y))
                 (pairlis (cdr x) (cdr y) a)))))
(defn assoc (x a)
  (cond ((eq (caar a) x) (car a))
        (t (assoc x (cdr a)))))

(define if
  (macro (pred then else) env
    (eval (list cond (list pred then) (list t else)) env)))

(defn apply (appv arg . opt)
  (eval (cons (unwrap appv) arg)
        (if (null opt) (make-environment) (car opt))))

(defn maplist (x fn)
  (cond ((null x) nil)
        (t (cons (fn (car x)) (maplist (cdr x) fn)))))

(defn for-each (fn x)
  (maplist x fn))

(defn length (a)
  (cond ((null a) 0)
        ((atom a) 0)
        (t (+ 1 (length (cdr a))))))


(define and
  (macro x e
    (cond ((null x) t)
          ((null (cdr x)) (eval (car x) e))
          ((eval (car x) e) (apply (wrap and) (cdr x) e))
          (t nil))))

(define begin
  (macro x e
    (cond ((null x) _)
          ((null (cdr x)) (eval (car x) e))
          (t (let ((_ (eval (car x) e)))
               (apply (wrap begin) (cdr x) e))))))
